/*
Copyright 2019 The NSQ-Operator Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/andyxning/nsq-operator/pkg/apis/nsqio/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NsqdLister helps list Nsqds.
type NsqdLister interface {
	// List lists all Nsqds in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Nsqd, err error)
	// Nsqds returns an object that can list and get Nsqds.
	Nsqds(namespace string) NsqdNamespaceLister
	NsqdListerExpansion
}

// nsqdLister implements the NsqdLister interface.
type nsqdLister struct {
	indexer cache.Indexer
}

// NewNsqdLister returns a new NsqdLister.
func NewNsqdLister(indexer cache.Indexer) NsqdLister {
	return &nsqdLister{indexer: indexer}
}

// List lists all Nsqds in the indexer.
func (s *nsqdLister) List(selector labels.Selector) (ret []*v1alpha1.Nsqd, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Nsqd))
	})
	return ret, err
}

// Nsqds returns an object that can list and get Nsqds.
func (s *nsqdLister) Nsqds(namespace string) NsqdNamespaceLister {
	return nsqdNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NsqdNamespaceLister helps list and get Nsqds.
type NsqdNamespaceLister interface {
	// List lists all Nsqds in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Nsqd, err error)
	// Get retrieves the Nsqd from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Nsqd, error)
	NsqdNamespaceListerExpansion
}

// nsqdNamespaceLister implements the NsqdNamespaceLister
// interface.
type nsqdNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Nsqds in the indexer for a given namespace.
func (s nsqdNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Nsqd, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Nsqd))
	})
	return ret, err
}

// Get retrieves the Nsqd from the indexer for a given namespace and name.
func (s nsqdNamespaceLister) Get(name string) (*v1alpha1.Nsqd, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("nsqd"), name)
	}
	return obj.(*v1alpha1.Nsqd), nil
}
