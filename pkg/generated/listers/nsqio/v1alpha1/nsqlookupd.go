/*
Copyright 2019 The NSQ-Operator Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/andyxning/nsq-operator/pkg/apis/nsqio/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NsqLookupdLister helps list NsqLookupds.
type NsqLookupdLister interface {
	// List lists all NsqLookupds in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.NsqLookupd, err error)
	// NsqLookupds returns an object that can list and get NsqLookupds.
	NsqLookupds(namespace string) NsqLookupdNamespaceLister
	NsqLookupdListerExpansion
}

// nsqLookupdLister implements the NsqLookupdLister interface.
type nsqLookupdLister struct {
	indexer cache.Indexer
}

// NewNsqLookupdLister returns a new NsqLookupdLister.
func NewNsqLookupdLister(indexer cache.Indexer) NsqLookupdLister {
	return &nsqLookupdLister{indexer: indexer}
}

// List lists all NsqLookupds in the indexer.
func (s *nsqLookupdLister) List(selector labels.Selector) (ret []*v1alpha1.NsqLookupd, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NsqLookupd))
	})
	return ret, err
}

// NsqLookupds returns an object that can list and get NsqLookupds.
func (s *nsqLookupdLister) NsqLookupds(namespace string) NsqLookupdNamespaceLister {
	return nsqLookupdNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NsqLookupdNamespaceLister helps list and get NsqLookupds.
type NsqLookupdNamespaceLister interface {
	// List lists all NsqLookupds in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.NsqLookupd, err error)
	// Get retrieves the NsqLookupd from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.NsqLookupd, error)
	NsqLookupdNamespaceListerExpansion
}

// nsqLookupdNamespaceLister implements the NsqLookupdNamespaceLister
// interface.
type nsqLookupdNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NsqLookupds in the indexer for a given namespace.
func (s nsqLookupdNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NsqLookupd, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NsqLookupd))
	})
	return ret, err
}

// Get retrieves the NsqLookupd from the indexer for a given namespace and name.
func (s nsqLookupdNamespaceLister) Get(name string) (*v1alpha1.NsqLookupd, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("nsqlookupd"), name)
	}
	return obj.(*v1alpha1.NsqLookupd), nil
}
